'use strict';

const _debug = require('debug');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e["default"] : e; }

const _debug__default = /*#__PURE__*/_interopDefaultLegacy(_debug);

const NAME = "windicss-webpack-plugin";
const MODULE_ID = "windi.css";
const MODULE_ID_VIRTUAL_TEST = /virtual:windi-?(.*?)\.css/;
const MODULE_ID_VIRTUAL_PREFIX = "virtual:windi";
const MODULE_ID_VIRTUAL_MODULES = [
  `${MODULE_ID_VIRTUAL_PREFIX}.css`,
  `${MODULE_ID_VIRTUAL_PREFIX}-base.css`,
  `${MODULE_ID_VIRTUAL_PREFIX}-utilities.css`,
  `${MODULE_ID_VIRTUAL_PREFIX}-components.css`
];
const HAS_DIRECTIVE_TEST = /@(apply|variants|screen|layer)\s/;
const HAS_THEME_FUNCTION_TEST = /theme\(.*?\)/;
const DEVTOOLS_MODULE_ID = "windi-devtools";
const DEVTOOLS_VIRTUAL_MODULE_ID = "virtual:windi-devtools";
const DEVTOOLS_VIRTUAL_MODULE = "virtual:windi-devtools.js";
const DEVTOOLS_POST_PATH = "/@windicss-devtools-update";
const DEFAULT_SERVER_HOST = "127.0.0.1";
const DEFAULT_SERVER_PORT = 8888;

const debug = {
  plugin: _debug__default(`${NAME}:plugin`),
  loader: _debug__default(`${NAME}:loader`)
};

const cssRequiresTransform = (source) => {
  return HAS_DIRECTIVE_TEST.test(source) || HAS_THEME_FUNCTION_TEST.test(source);
};
const isJsx = (source) => {
  return /{`(.*)`}/gms.test(source);
};
const transformCSS = (service, source, resource) => {
  if (!source || source.length <= 0)
    return source;
  if (!cssRequiresTransform(source))
    return source;
  let output = source;
  try {
    output = service.transformCSS(source, resource, { globaliseKeyframes: true });
    if (!output || output.length <= 0) {
      debug.loader(`[WindiCSS] Invalid response from windi core transforming resource: ${resource}.`);
      return source;
    }
    debug.loader("Transformed CSS", resource);
  } catch (e) {
    debug.loader(`[WindiCSS] Exception when transforming CSS for resource: ${resource}.`, e);
    return source;
  }
  return output;
};
const def = (val, def2) => {
  if (val)
    return val;
  return def2;
};
function getChangedModuleNames(utils) {
  if (utils.hasPending)
    utils.buildPendingStyles();
  const moduleNames = [
    `${MODULE_ID_VIRTUAL_PREFIX}.css`
  ];
  Object.entries(utils.layersMeta).forEach(([name, meta]) => {
    if (meta.cssCache == null)
      moduleNames.push(`${MODULE_ID_VIRTUAL_PREFIX}-${name}.css`);
  });
  return moduleNames;
}
const isDev = () => process.env.NODE_ENV === "development";
const isWebCompilerTarget = (target) => {
  let isWeb = true;
  if (typeof target === "string") {
    isWeb = !target.includes("node");
  } else if (Array.isArray(target)) {
    target.forEach((str) => {
      if (str.includes("node"))
        isWeb = false;
    });
  } else {
    isWeb = false;
  }
  return isWeb;
};

exports.DEFAULT_SERVER_HOST = DEFAULT_SERVER_HOST;
exports.DEFAULT_SERVER_PORT = DEFAULT_SERVER_PORT;
exports.DEVTOOLS_MODULE_ID = DEVTOOLS_MODULE_ID;
exports.DEVTOOLS_POST_PATH = DEVTOOLS_POST_PATH;
exports.DEVTOOLS_VIRTUAL_MODULE = DEVTOOLS_VIRTUAL_MODULE;
exports.DEVTOOLS_VIRTUAL_MODULE_ID = DEVTOOLS_VIRTUAL_MODULE_ID;
exports.MODULE_ID = MODULE_ID;
exports.MODULE_ID_VIRTUAL_MODULES = MODULE_ID_VIRTUAL_MODULES;
exports.MODULE_ID_VIRTUAL_TEST = MODULE_ID_VIRTUAL_TEST;
exports.NAME = NAME;
exports.debug = debug;
exports.def = def;
exports.getChangedModuleNames = getChangedModuleNames;
exports.isDev = isDev;
exports.isJsx = isJsx;
exports.isWebCompilerTarget = isWebCompilerTarget;
exports.transformCSS = transformCSS;
