import { Compiler, WebpackPluginInstance } from 'webpack';
import { WindiPluginUtils, UserOptions } from '@windicss/plugin-utils';
import http from 'http';

declare class Server {
    server: http.Server;
    host: string;
    port: number;
    _listen: boolean;
    constructor(compiler: Compiler, options: WindiCSSWebpackPluginOptions['server']);
    ensureStart(): Promise<this>;
    close(): void;
}

declare module 'virtual:windi.css' { }
declare module 'virtual:windi-base.css' { }
declare module 'virtual:windi-components.css' { }
declare module 'virtual:windi-utilities.css' { }
declare module 'windi.css' { }
declare module 'windi-base.css' { }
declare module 'windi-components.css' { }
declare module 'windi-utilities.css' { }
declare module 'webpack' {
    interface Compiler {
        $windi: WindiPluginUtils & {
            dirty: Set<string>;
            root: string;
            virtualModules: Map<string, string>;
            initException?: Error;
            invalidateCssModules: (resource: string, modules: string[]) => void;
            server: Server;
        };
    }
}
declare type WindiCSSWebpackPluginOptions = UserOptions & {
    /**
     * Reuse existing utils if exists
     */
    utils?: WindiPluginUtils;
    /**
     * The path where the virtual module should be injected. By default this is the project root but for
     * some projects (such as craco), specifying the directory is needed.
     *
     * @default ''
     */
    virtualModulePath: string;
    /**
     * Options for devtools backend server.
     */
    server?: {
        /**
         * Port for devtools backend server.
         *
         * @default 8888
         */
        port?: number;
        /**
         * Host for devtools backend server.
         *
         * @default '127.0.0.1'
         */
        host?: string;
    };
};

declare class WindiCSSWebpackPlugin implements WebpackPluginInstance {
    options: WindiCSSWebpackPluginOptions;
    constructor(options?: Partial<WindiCSSWebpackPluginOptions>);
    apply(compiler: Compiler): void;
}

export { WindiCSSWebpackPluginOptions, WindiCSSWebpackPlugin as default };
