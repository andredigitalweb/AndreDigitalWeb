'use strict';

const fs = require('fs');
const pathe = require('pathe');
const utils = require('../shared/windicss-webpack-plugin.5973fca3.cjs');
require('debug');

const DEVTOOLS_CLIENT_PATH = pathe.resolve(__dirname, "../runtime/client.cjs");
function getMockClassesInjector(compiler) {
  const completions = compiler.$windi.getCompletions();
  const comment = "/* Windi CSS mock class names for devtools auto-completion */\n";
  const css = [
    ...completions.color,
    ...completions.static
  ].map((name) => `.${compiler.$windi.processor.e(name)}{}`).join("");
  return `
const style = document.createElement('style')
style.setAttribute('type', 'text/css')
style.innerHTML = ${JSON.stringify(comment + css)}
document.head.prepend(style)
`;
}
async function devtoolsLoader(source) {
  const callback = this.async();
  if (!this._compiler) {
    callback(null, source);
    return;
  }
  this.cacheable(true);
  const { port, host } = await this._compiler.$windi.server.ensureStart();
  if (utils.isWebCompilerTarget(this._compiler.options.target) && utils.isDev()) {
    const clientContent = fs.readFileSync(DEVTOOLS_CLIENT_PATH, "utf-8").replace("__POST_PATH__", `http://${host}:${port}${utils.DEVTOOLS_POST_PATH}`);
    const mockClasses = getMockClassesInjector(this._compiler);
    callback(null, `${clientContent}
${mockClasses}`);
  } else {
    callback(null, "");
  }
}

module.exports = devtoolsLoader;
