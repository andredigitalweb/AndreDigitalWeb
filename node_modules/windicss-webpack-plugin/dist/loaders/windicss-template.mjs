import compileTemplate from 'lodash/template';
import defaults from 'lodash/defaults';
import loaderUtils from 'loader-utils';
import { t as transformCSS, h as debug, m as isJsx, k as def } from '../shared/windicss-webpack-plugin.c33fb8ee.mjs';
import 'debug';



// -- Unbuild CommonJS Shims --
import __cjs_url__ from 'url';
import __cjs_path__ from 'path';
import __cjs_mod__ from 'module';
const __filename = __cjs_url__.fileURLToPath(import.meta.url);
const __dirname = __cjs_path__.dirname(__filename);
const require = __cjs_mod__.createRequire(import.meta.url);
function WindicssTemplate(source) {
  if (!this._compiler)
    return source;
  this.cacheable(true);
  const service = this._compiler.$windi;
  if (!service)
    return source;
  if (this.resource.indexOf("type=style") > 0)
    return transformCSS(service, source, this.resource);
  const hasHtmlWebpackPlugin = this.loaders.filter((loader) => {
    return loader.loader && loader.loader.indexOf("html-webpack-plugin") > 0 || loader.path && loader.path.indexOf("html-webpack-plugin") > 0;
  }).length > 0;
  if (hasHtmlWebpackPlugin) {
    const options = this.query !== "" ? loaderUtils.parseQuery(this.query) : {};
    const template = compileTemplate(source, defaults(options, { variable: "data" }));
    return `var _ = require(${loaderUtils.stringifyRequest(this, `!!${require.resolve("lodash")}`)});module.exports = function (templateParams) { with(templateParams) {return (${template.source})();}}`;
  }
  let output = source;
  try {
    const templateWithTransformedCSS = source.replace(/<style(.*?)>(.*?)<\/style>/gms, (match, meta, css) => {
      if (meta.includes("sass") || meta.includes("stylus") || meta.includes("less")) {
        debug.loader("Template has unsupported block, skipping resource", this.resource);
        return match;
      }
      if (isJsx(css)) {
        let m, transformedCSS2;
        const jsxMatcher = /{`(.*)`}/gms;
        while ((m = jsxMatcher.exec(css)) !== null) {
          if (m.index === jsxMatcher.lastIndex)
            jsxMatcher.lastIndex++;
          m.forEach((match2, groupIndex) => {
            if (groupIndex === 1) {
              const transformedJSXCSS = transformCSS(service, match2, this.resource);
              transformedCSS2 = `<style${meta}>
{\`${transformedJSXCSS}
\`}</style>`;
              debug.loader("jsx transformed", transformedCSS2);
            }
          });
        }
        return def(transformedCSS2, match);
      }
      const transformedCSS = transformCSS(service, css, this.resource);
      return `<style${meta}>
${transformedCSS}
</style>`;
    });
    debug.loader("Transformed template ", this.resource);
    const transformed = service.transformGroups(templateWithTransformedCSS);
    if (transformed)
      output = transformed.code;
    else
      output = templateWithTransformedCSS;
  } catch (e) {
    this.emitWarning(`[WindiCSS] Failed to transform groups and css for template: ${this.resource}.`);
  }
  return output;
}

export { WindicssTemplate as default };
