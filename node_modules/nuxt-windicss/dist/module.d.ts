import { UserOptions, WindiPluginUtils, ResolvedOptions } from '@windicss/plugin-utils';
import { Config } from 'windicss/types/interfaces';
import { NuxtModule } from '@nuxt/schema';
import { ListenOptions } from 'listhen';
import { AnalysisOptions } from 'windicss-analysis';

type AnalyzeOptions = true | false | {
    analysis?: AnalysisOptions;
    server?: Partial<ListenOptions>;
};

type NuxtHookResult = Promise<void> | void;
type ModuleOptions = UserOptions & {
    /**
     * Pass a pre-instantiated WindiPluginUtils instance to avoid duplicate scans if you're using the engine elsewhere.
     *
     * @default undefined
     */
    utils?: WindiPluginUtils;
    /**
     * Launches Windi Analyze when in development mode.
     * @default false
     */
    analyze?: AnalyzeOptions;
    /**
     * Shows nuxt-windicss and windicss versions on build:before hook.
     * @default true
     */
    displayVersionInfo?: boolean;
};
interface ModuleHooks {
    'windicss:options': (options: ResolvedOptions) => NuxtHookResult;
    'windicss:config': (config: Config) => NuxtHookResult;
    'windicss:utils': (utils: WindiPluginUtils) => NuxtHookResult;
}
declare const _default: NuxtModule<ModuleOptions>;

export { ModuleHooks, ModuleOptions, _default as default };
